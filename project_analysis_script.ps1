# Get the current directory name to use as the project name
$projectName = Get-Item -Path . | Select-Object -ExpandProperty Name

# Define the output file path based on the project name
$outputFile = ".\$($projectName)_ProjectSummary.txt"

# Get the full path of the current directory to use as a root for relative paths
$currentDirectory = Get-Location

# Define common source code file extensions
$sourceExtensions = @("*.cs", "*.py", "*.js", "*.java", "*.html", "*.css", "*.cpp", "*.h", "*.ts", "*.jsx", "*.tsx", "*.php", "*.rb", "*.go", "*.sh", "*.ps1", "*.bat")

# Define common dataset/data-related file extensions
$dataExtensions = @("*.json", "*.xml", "*.csv", "*.txt", "*.md", "*.yml", "*.yaml", "*.sql")

# Define files and directories to ignore
$excludePatterns = @("node_modules", ".env", ".git", ".gitignore", "package-lock.json", "yarn.lock", "*.log", "dist", "build", "bin", "obj", "*.lock", "*.zip", "*.rar", "*.exe", "*.dll")

# Initialize variables to track word counts
$totalSourceCodeWords = 0
$totalDataWords = 0

# --- Function to get a timestamp ---
function Get-Timestamp {
    return Get-Date -Format "yyyy-MM-dd HH:mm:ss"
}

# --- Function to write professional metadata ---
function Write-Metadata {
    param (
        [string]$filePath,
        [string]$projectName,
        [int]$sourceWords,
        [int]$dataWords
    )
    Add-Content -Path $filePath -Value "===== Project Summary ====="
    Add-Content -Path $filePath -Value "Project Name: $projectName"
    Add-Content -Path $filePath -Value "Generation Date: $(Get-Timestamp)"
    Add-Content -Path $filePath -Value "Generated By: PowerShell Script"
    Add-Content -Path $filePath -Value "Total Source Code Words: $sourceWords"
    Add-Content -Path $filePath -Value "Total Dataset/Text Words: $dataWords"
    Add-Content -Path $filePath -Value "Description: A comprehensive summary of the project's structure, source code, and data files, designed for secure LLM context submission."
    Add-Content -Path $filePath -Value "==========================="
    Add-Content -Path $filePath -Value "`n"
}

# Clear the output file if it already exists
if (Test-Path $outputFile) {
    Remove-Item $outputFile -Force
}

# Write a temporary metadata header to be updated later
Add-Content -Path $outputFile -Value "[[METADATA_PLACEHOLDER]]"

# Write the directory structure to the output file, excluding specified patterns
Add-Content -Path $outputFile -Value "===== Directory Structure ====="
$allFiles = Get-ChildItem -Recurse -File | Where-Object {
    $path = $_.FullName
    $shouldInclude = $true
    foreach ($pattern in $excludePatterns) {
        if ($path -like "*$pattern*") {
            $shouldInclude = $false
            break
        }
    }
    $shouldInclude
}

$directoryStructure = $allFiles | ForEach-Object { 
    $_.FullName.Replace($currentDirectory.Path + "\", "") 
} | Out-String
Add-Content -Path $outputFile -Value $directoryStructure

# Add a separator for source code files
Add-Content -Path $outputFile -Value "`n===== Source Code Files ====="

# Loop through source code files
foreach ($ext in $sourceExtensions) {
    $allFiles | Where-Object { $_.Name -like $ext } | ForEach-Object {
        $filePath = $_.FullName
        $relativePath = $filePath.Replace($currentDirectory.Path + "\", "")
        $fileContent = Get-Content -Path $filePath -Raw
        
        # Count words and add to total
        $wordCount = ($fileContent -split '\s+').Count
        $totalSourceCodeWords += $wordCount
        
        Add-Content -Path $outputFile -Value "`n--- File: $relativePath ---"
        Add-Content -Path $outputFile -Value "Words: $wordCount"
        Add-Content -Path $outputFile -Value $fileContent
    }
}

# Add a separator for dataset files
Add-Content -Path $outputFile -Value "`n===== Datasets and Text Files ====="

# Loop through dataset files
foreach ($ext in $dataExtensions) {
    $allFiles | Where-Object { $_.Name -like $ext } | ForEach-Object {
        $filePath = $_.FullName
        $relativePath = $filePath.Replace($currentDirectory.Path + "\", "")
        $fileContent = Get-Content -Path $filePath -Raw
        $wordCount = ($fileContent -split '\s+').Count
        $totalDataWords += $wordCount

        Add-Content -Path $outputFile -Value "`n--- File: $relativePath ---"
        Add-Content -Path $outputFile -Value "Words: $wordCount"

        # Special handling for CSV files
        if ($_.Extension -eq ".csv") {
            # Read first few lines of CSV for context
            $csvContent = Get-Content -Path $filePath -Raw | Select-Object -First 6
            Add-Content -Path $outputFile -Value "Content (first 5 rows):"
            Add-Content -Path $outputFile -Value ($csvContent | Out-String)
            Add-Content -Path $outputFile -Value "... (full content omitted for brevity)"
        } else {
            # For other data types, include full content
            Add-Content -Path $outputFile -Value $fileContent
        }
    }
}

# --- Update the metadata with the final word count ---
$finalContent = Get-Content -Path $outputFile -Raw
$metadataHeader = @"
===== Project Summary =====
Project Name: $projectName
Generation Date: $(Get-Timestamp)
Generated By: PowerShell Script
Total Source Code Words: $totalSourceCodeWords
Total Dataset/Text Words: $totalDataWords
Description: A comprehensive summary of the project's structure, source code, and data files, designed for secure LLM context submission.
===========================

"@
$finalContent = $finalContent.Replace("[[METADATA_PLACEHOLDER]]", $metadataHeader)
$finalContent | Set-Content -Path $outputFile

Write-Host "Project structure and source code have been saved to $outputFile"